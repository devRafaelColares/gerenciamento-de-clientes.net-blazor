@page "/clientes"

<PageTitle>Clientes</PageTitle>

<MudPaper Class="pa-4">
<MudPaper Class="mud-width-full pa-6 mb-8" Elevation="2">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudStack
                Row="true"
                Spacing="3" 
                JustifyContent="JustifyContent.SpaceBetween" 
                AlignItems="AlignItems.Center">
                
                <div class="pt-04">
                    <MudText Typo="Typo.h4">Consulta de Clientes</MudText>
                </div>
            </MudStack>
                @* <MudButton 
                    Variant="Variant.Filled" 
                    StartIcon="@Icons.Material.Filled.FilterAlt" 
                    Color="Color.Default" 
                    Size="Size.Small" 
                 OnClick="OpenFilterDialog" /> *@
            <MudStack
            Class="mt-2"
                Row="true"
                JustifyContent="JustifyContent.SpaceBetween">
                <MudTextField
                Style="width: 400px;"
                    Margin="Margin.Dense"
                    Placeholder="Filtrar" 
                    @bind-Value="termoDeBusca" 
                    T="string" 
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    Immediate="true"
                    OnValueChanged="OnFiltroChanged" 
                    />
                
                <div>
                    <MudButton 
                        Variant="Variant.Filled" 
                        StartIcon="@Icons.Material.Filled.Add" 
                        Color="Color.Info" 
                        Size="Size.Small" 
                        OnClick="NavigateToCadastroCliente">Cadastrar Cliente
                    </MudButton>

                    <MudButton 
                        Variant="Variant.Filled" 
                        StartIcon="@Icons.Material.Filled.Delete" 
                        Color="Color.Error" 
                        Size="Size.Small"
                        OnClick="DeletarClientesSelecionados">Deletar Cliente
                    </MudButton>
                </div>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>


<MudTable Items="_clientes?.Where(Filter) ?? Enumerable.Empty<Cliente>()" Filterable="true" QuickFilter="Filter">
        <HeaderContent>
            <MudTh>Selecionar</MudTh>
            <MudTh>Código</MudTh>
            <MudTh>Nome</MudTh>
            <MudTh>Telefone</MudTh>
            <MudTh>Foto</MudTh>
            <MudTh>Sexo</MudTh>
            <MudTh>Cidade</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh>Data de Cadastro</MudTh>
            <MudTh> </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudCheckBox @bind-Value="@context.IsSelected" Color="Color.Error" UnCheckedColor="Color.Default"></MudCheckBox>
            </MudTd>
            <MudTd DataLabel="Código">@context.Codigo</MudTd>
            <MudTd DataLabel="Nome">@context.Nome</MudTd>
            <MudTd DataLabel="Telefone">@context.Telefone</MudTd>
            <MudTd DataLabel="Foto">
                <MudAvatar Size="Size.Medium" ImgSrc="@context.Foto" />
            </MudTd>
            <MudTd DataLabel="Sexo">@context.Sexo</MudTd>
            <MudTd DataLabel="Cidade">@context.Cidade.Nome</MudTd>
            <MudTd DataLabel="Estado">@context.Cidade.Estado</MudTd>
            <MudTd DataLabel="Data de Cadastro">@context.CreatedAt.ToString("dd/MM/yyyy HH:mm")</MudTd>
            <MudIconButton 
                Icon="@Icons.Material.Filled.Edit"
                Color="Color.Default">
            </MudIconButton>
        </RowTemplate>
    </MudTable>

    <MudText Typo="Typo.subtitle2" Class="mt-4" Color="Color.Error" Hidden="@string.IsNullOrEmpty(_errorMessage)">
        @_errorMessage
    </MudText>
</MudPaper>

@code {
    private List<Cliente>? _clientes;
    private string _errorMessage = string.Empty;
    private string termoDeBusca { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CarregarClientes();
    }

    private async Task CarregarClientes()
    {
        try
        {
            _clientes = await ClientesService.GetClientes();
            if (_clientes == null)
            {
                _clientes = new List<Cliente>();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erro: {ex.Message}";
            _clientes = new List<Cliente>();
        }
    }


    private async Task DeletarClientesSelecionados()
    {
        var clientesSelecionados = _clientes.Where(c => c.IsSelected).ToList();

        foreach (var cliente in clientesSelecionados)
        {
            await ClientesService.DeletarCliente(cliente.Codigo);
        }

        await CarregarClientes();
    }

    private void NavigateToCadastroCliente()
    {
        NavigationManager.NavigateTo("/cadastro");
    }

    private void OnFiltroChanged(string novoValor)
    {
        termoDeBusca = novoValor;
        StateHasChanged(); // Atualiza a UI para refletir o novo filtro
    }

    public Func<Cliente, bool> Filter => cliente =>
    {
        if (_clientes == null || string.IsNullOrWhiteSpace(termoDeBusca))
            return true;

        var keywords = termoDeBusca.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        return keywords.All(keyword =>
            (cliente.Codigo.ToString().Contains(keyword, StringComparison.OrdinalIgnoreCase)) ||
            (cliente.Nome?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (cliente.Telefone?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (cliente.Sexo?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (cliente.Cidade.Nome?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (cliente.Cidade.Estado?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (cliente.CreatedAt.ToString("dd/MM/yyyy").Contains(keyword, StringComparison.OrdinalIgnoreCase))
        );
    };

}
